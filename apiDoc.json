{
  "openapi": "3.0.3",
  "info": {
    "title": "Budget Traveler Web App",
    "description": "API documentation for Budget Traveler Web App",
    "version": "1.0.0",
    "contact": {
      "name": "admin",
      "email": "admin@metropolia.fi"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local environment"
    },
    {
      "url": "http://10.114.32.115/app",
      "description": "Production environment"
    }
  ],
  "tags": [
    {
      "name": "Post endpoints"
    },
    {
      "name": "User endpoints"
    },
    {
      "name": "Comment endpoints"
    },
    {
      "name": "Auth endpoints"
    },
    {
      "name": "Reaction endpoints"
    },
    {
      "name": "Follower endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "in": "header",
        "description": "JWT Authorization header using the Bearer scheme"
      }
    }
  },
  "paths": {
    "/post": {
      "get": {
        "tags": ["Post endpoints"],
        "description": "Get all posts in descending order",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "The page which the user wants to display"
          }
        ],
        "responses": {
          "200": {
            "description": "Server response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_posts_count": {
                      "type": "integer",
                      "example": "14"
                    },
                    "page_number": {
                      "type": "integer",
                      "example": "2"
                    },
                    "posts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "post_id": {
                            "type": "integer",
                            "example": "1"
                          },
                          "title": {
                            "type": "string",
                            "example": "Campsite in Nuuksio"
                          },
                          "address": {
                            "type": "string",
                            "example": "Karaportti 2"
                          },
                          "coords": {
                            "type": "string",
                            "example": "Karaportti 2"
                          },
                          "content": {
                            "type": "string",
                            "example": "A nice place for a getaway weekend"
                          },
                          "regionId": {
                            "type": "string",
                            "enum": [
                              "Ahvenanmaa",
                              "Etelä-Karjala",
                              "Etelä-Pohjanmaa",
                              "Etelä-Savo",
                              "Kainuu",
                              "Kanta-Häme",
                              "Keski-Pohjanmaa",
                              "Keski-Suomi",
                              "Kymenlaakso",
                              "Lappi",
                              "Pirkanmaa",
                              "Pohjanmaa",
                              "Pohjois-Karjala",
                              "Pohjois-Pohjanmaa",
                              "Pohjois-Savo",
                              "Päijät-Häme",
                              "Satakunta",
                              "Uusimaa",
                              "Varsinais-Suomi"
                            ]
                          },
                          "created_date": {
                            "type": "string",
                            "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                            "example": "2021-12-04 20:49:26"
                          },
                          "edited_date": {
                            "type": "string",
                            "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                            "example": "2021-12-04 20:49:26"
                          },
                          "free_or_not": {
                            "type": "string",
                            "enum": ["free", "paid"]
                          },
                          "price": {
                            "type": "integer",
                            "format": "float",
                            "example": "25.00"
                          },
                          "filename": {
                            "type": "string",
                            "example": "97b439006ad80c172419ce51354b06b1"
                          },
                          "user_id": {
                            "type": "integer",
                            "example": "1"
                          },
                          "username": {
                            "type": "string",
                            "example": "camper1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Post endpoints"],
        "description": "Insert a campsite | Authorization: Bearer token",
        "security": {
          "bearerAuth": []
        },
        "requestBody": {
          "required": "true",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "content",
                  "regionId",
                  "freeOrNot",
                  "photo"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "regionId": {
                    "type": "string",
                    "enum": [
                      "Ahvenanmaa",
                      "Etelä-Karjala",
                      "Etelä-Pohjanmaa",
                      "Etelä-Savo",
                      "Kainuu",
                      "Kanta-Häme",
                      "Keski-Pohjanmaa",
                      "Keski-Suomi",
                      "Kymenlaakso",
                      "Lappi",
                      "Pirkanmaa",
                      "Pohjanmaa",
                      "Pohjois-Karjala",
                      "Pohjois-Pohjanmaa",
                      "Pohjois-Savo",
                      "Päijät-Häme",
                      "Satakunta",
                      "Uusimaa",
                      "Varsinais-Suomi"
                    ]
                  },
                  "freeOrNot": {
                    "type": "string",
                    "enum": ["free", "paid"]
                  },
                  "price": {
                    "type": "integer",
                    "format": "float"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "JPG, JPEG, PNG and GIF files only"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/jpeg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "A post created with id 24"
                    },
                    "post_id": {
                      "type": "integer",
                      "example": "24"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/post/{postId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to get"
          }
        ],
        "tags": ["Post endpoints"],
        "description": "API endpoint for getting a specific post",
        "responses": {
          "200": {
            "description": "Server response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post_id": {
                      "type": "integer",
                      "example": "1"
                    },
                    "title": {
                      "type": "string",
                      "example": "Campsite in Nuuksio"
                    },
                    "address": {
                      "type": "string",
                      "example": "Karaportti 2"
                    },
                    "coords": {
                      "type": "string",
                      "example": "Karaportti 2"
                    },
                    "content": {
                      "type": "string",
                      "example": "A nice place for a getaway weekend"
                    },
                    "regionId": {
                      "type": "string",
                      "enum": [
                        "Finland",
                        "Ahvenanmaa",
                        "Etelä-Karjala",
                        "Etelä-Pohjanmaa",
                        "Etelä-Savo",
                        "Kainuu",
                        "Kanta-Häme",
                        "Keski-Pohjanmaa",
                        "Keski-Suomi",
                        "Kymenlaakso",
                        "Lappi",
                        "Pirkanmaa",
                        "Pohjanmaa",
                        "Pohjois-Karjala",
                        "Pohjois-Pohjanmaa",
                        "Pohjois-Savo",
                        "Päijät-Häme",
                        "Satakunta",
                        "Uusimaa",
                        "Varsinais-Suomi"
                      ]
                    },
                    "created_date": {
                      "type": "string",
                      "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                      "example": "2021-12-04 20:49:26"
                    },
                    "edited_date": {
                      "type": "string",
                      "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                      "example": "2021-12-04 20:49:26"
                    },
                    "free_or_not": {
                      "type": "string",
                      "enum": ["free", "paid"]
                    },
                    "price": {
                      "type": "integer",
                      "format": "float",
                      "example": "25.00"
                    },
                    "filename": {
                      "type": "string",
                      "example": "97b439006ad80c172419ce51354b06b1"
                    },
                    "user_id": {
                      "type": "integer",
                      "example": "1"
                    },
                    "username": {
                      "type": "string",
                      "example": "camper1"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to delete"
          }
        ],
        "tags": ["Post endpoints"],
        "description": "API endpoint for deleting a specific post | Authorization: bearer token",
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Post deleted: true"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to update"
          }
        ],
        "tags": ["Post endpoints"],
        "description": "Update a post | Authorization: bearer token",
        "requestBody": {
          "required": "true",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "content",
                  "regionId",
                  "freeOrNot",
                  "photo"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "regionId": {
                    "type": "string",
                    "enum": [
                      "Ahvenanmaa",
                      "Etelä-Karjala",
                      "Etelä-Pohjanmaa",
                      "Etelä-Savo",
                      "Kainuu",
                      "Kanta-Häme",
                      "Keski-Pohjanmaa",
                      "Keski-Suomi",
                      "Kymenlaakso",
                      "Lappi",
                      "Pirkanmaa",
                      "Pohjanmaa",
                      "Pohjois-Karjala",
                      "Pohjois-Pohjanmaa",
                      "Pohjois-Savo",
                      "Päijät-Häme",
                      "Satakunta",
                      "Uusimaa",
                      "Varsinais-Suomi"
                    ]
                  },
                  "freeOrNot": {
                    "type": "string",
                    "enum": ["free", "paid"]
                  },
                  "price": {
                    "type": "integer",
                    "format": "float"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "JPG, JPEG, PNG and GIF files only"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/jpeg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Post updated: true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["User endpoints"],
        "description": "Get all users",
        "responses": {
          "200": {
            "description": "Server response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user_id": {
                        "type": "integer",
                        "example": "1"
                      },
                      "username": {
                        "type": "string",
                        "example": "camper1"
                      },
                      "email": {
                        "type": "string",
                        "example": "camper1@metropilia.fi"
                      },
                      "role": {
                        "type": "integer",
                        "example": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the user to update"
          }
        ],
        "tags": ["User endpoints"],
        "description": "Update a user | Authorization: bearer token",
        "requestBody": {
          "required": "true",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": ["username", "email", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Minimum 3 characters"
                  },
                  "password": {
                    "type": "string",
                    "description": "Minimum 8 characters, at least 1 capital character"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User updated: true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the user to get"
          }
        ],
        "tags": ["User endpoints"],
        "description": "API endpoint for getting a specific user",
        "responses": {
          "200": {
            "description": "Server response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user_id": {
                        "type": "integer",
                        "example": "1"
                      },
                      "username": {
                        "type": "string",
                        "example": "camper1"
                      },
                      "email": {
                        "type": "string",
                        "example": "camper1@metropolia.fi"
                      },
                      "role": {
                        "type": "integer",
                        "example": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the user to delete"
          }
        ],
        "tags": ["User endpoints"],
        "description": "API endpoint for deleting a specific user | Authorization: bearer token",
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted: true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/post/{postId}/comment": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to view comment"
          }
        ],
        "tags": ["Comment endpoints"],
        "description": "Get all comments of a specific post in descending order",
        "responses": {
          "200": {
            "description": "Server response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment_id": {
                        "type": "integer",
                        "example": "1"
                      },
                      "content": {
                        "type": "string",
                        "example": "Such a beautiful campsite"
                      },
                      "created_date": {
                        "type": "string",
                        "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                        "example": "2021-12-04 20:49:26"
                      },
                      "edited_date": {
                        "type": "string",
                        "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                        "example": "2021-12-04 20:49:26"
                      },
                      "post_id": {
                        "type": "integer",
                        "example": "4"
                      },
                      "user_id": {
                        "type": "integer",
                        "example": "2"
                      },
                      "username": {
                        "type": "string",
                        "example": "camper1"
                      },
                      "email": {
                        "type": "string",
                        "example": "camper1@metropilia.fi"
                      },
                      "role": {
                        "type": "integer",
                        "example": "1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to view comment"
          }
        ],
        "tags": ["Comment endpoints"],
        "description": "Insert a comment | Authorization: bearer token",
        "requestBody": {
          "required": "true",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": ["content"],
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "A comment created with id 5"
                    },
                    "user_id": {
                      "type": "integer",
                      "example": "5"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/post/{postId}/comment/{commentId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to get"
          },
          {
            "in": "path",
            "name": "commentId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the comment to get"
          }
        ],
        "tags": ["Comment endpoints"],
        "description": "API endpoint for getting a specific comment of a specific post",
        "responses": {
          "200": {
            "description": "Server response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "comment_id": {
                        "type": "integer",
                        "example": "1"
                      },
                      "content": {
                        "type": "string",
                        "example": "Such a beautiful campsite"
                      },
                      "created_date": {
                        "type": "string",
                        "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                        "example": "2021-12-04 20:49:26"
                      },
                      "edited_date": {
                        "type": "string",
                        "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                        "example": "2021-12-04 20:49:26"
                      },
                      "post_id": {
                        "type": "integer",
                        "example": "4"
                      },
                      "user_id": {
                        "type": "integer",
                        "example": "2"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to get"
          },
          {
            "in": "path",
            "name": "commentId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the user to delete"
          }
        ],
        "tags": ["Comment endpoints"],
        "description": "API endpoint for deleting a specific comment of a specific post | Authorization: bearer token",
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Comment deleted: true"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the post to get"
          },
          {
            "in": "path",
            "name": "commentId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the comment to update"
          }
        ],
        "tags": ["Comment endpoints"],
        "description": "Update a comment | Authorization: bearer token",
        "requestBody": {
          "required": "true",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": ["content"],
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Comment updated: true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth endpoints"],
        "description": "Log user in",
        "requestBody": {
          "required": "true",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "camper1@metropilia.fi"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "user_id": {
                          "type": "integer",
                          "example": "1"
                        },
                        "username": {
                          "type": "string",
                          "example": "camper1"
                        },
                        "email": {
                          "type": "string",
                          "example": "camper1@metropilia.fi"
                        },
                        "role": {
                          "type": "integer",
                          "example": "1"
                        }
                      }
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0LCJ1c2VybmFtZSI6ImNhbXBlcjNNTU0iLCJlbWFpbCI6ImNhbXBlcjNAbWV0cm9wb2xpYS5maSIsInJvbGUiOjEsImlhdCI6MTYzOTMxNDQyM30.Q_oxEhRNoYtyHfVK367Wlk8WgcnfG8TOfvikXhn0Jv4"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Auth endpoints"],
        "description": "Register a user",
        "security": {
          "bearerAuth": []
        },
        "requestBody": {
          "required": "true",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": ["email", "username", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "email type"
                  },
                  "username": {
                    "type": "string",
                    "description": "Minimum 3 characters"
                  },
                  "password": {
                    "type": "string",
                    "description": "Minimum 8 characters, at least 1 capital character"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "A user created with id 5"
                    },
                    "user_id": {
                      "type": "integer",
                      "example": "5"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Auth endpoints"],
        "description": "Log a user out",
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "logout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/post/{postId}/reaction": {
      "get": {
        "tags": ["Reaction endpoints"],
        "description": "Check if the logged-in user reacted to this post or not | Authentication: bearer token",
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the required post to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_id": {
                        "type": "integer",
                        "example": 15
                      },
                      "user_id": {
                        "type": "integer",
                        "example": 7
                      },
                      "isLiked": {
                        "type": "integer",
                        "example": 1
                      },
                      "reaction_date": {
                        "type": "string",
                        "pattern": "d{4}-d{1,2}-d{1,2} d{1,2}:d{1,2}:d{1,2}",
                        "example": "2021-12-04 20:49:26"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reaction endpoints"],
        "description": "Delete a reaction | Authorization: bearer token",
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the required post to get"
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the requesting user to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Reaction deleted: true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/post/{postId}/reaction/{isLiked}": {
      "get": {
        "tags": ["Reaction endpoints"],
        "description": "Get total likes or dislike of a post",
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the required post to get"
          },
          {
            "in": "path",
            "name": "isLike",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "1 for getting total likes of a poat, 0 for getting total dislikes of a post "
          }
        ],
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count_reaction": {
                      "type": "integer",
                      "example": "20"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reaction endpoints"],
        "description": "Like or dislike a post | Authorization: bearer token",
        "security": {
          "bearerAuth": []
        },
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the required post to get"
          },
          {
            "in": "path",
            "name": "isLike",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "1 for liking of a post, 0 for disliking of a post "
          }
        ],
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "A creation is created: true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{userId}/follower": {
      "get": {
        "tags": ["Follower endpoints"],
        "description": "Get all the users followed by a specific user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the required user to get their followers, extrated from bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user_id": {
                        "type": "integer",
                        "example": "1"
                      },
                      "username": {
                        "type": "string",
                        "example": "camper1"
                      },
                      "user_email": {
                        "type": "string",
                        "example": "camper1@metropilia.fi"
                      },
                      "follower_id": {
                        "type": "integer",
                        "example": "2"
                      },
                      "followed_username": {
                        "type": "string",
                        "example": "camper2"
                      },
                      "followed_email": {
                        "type": "string",
                        "example": "camper2@metropilia.fi"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Follower endpoints"],
        "description": "Follow a user | Authorization: bearer token",
        "parameters": [
          {
            "in": "path",
            "name": "followerId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the user to follow"
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the requesting user to follow another user, extrated from the bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "A follower is added: true"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Follower endpoints"],
        "description": "Unfollow a user | Authorization: bearer token",
        "parameters": [
          {
            "in": "path",
            "name": "followerId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the user to unfollow"
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "integer"
            },
            "required": "true",
            "description": "Numeric ID of the requesting user to unfollow another user, extrated from the bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "Server responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unfollowing: true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
